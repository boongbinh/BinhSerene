{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/MovieDB/GenreColumns.ts", "../../../Modules/ServerTypes/MovieDB/GenreRow.ts", "../../../Modules/ServerTypes/MovieDB/GenreService.ts", "../../../Modules/ServerTypes/MovieDB/MovieColumns.ts", "../../../Modules/ServerTypes/MovieDB/MovieKind.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresColumns.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresService.ts", "../../../Modules/ServerTypes/MovieDB/MovieRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieService.ts", "../../../Modules/ServerTypes/MovieDB/GenreForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresForm.ts"],
  "sourcesContent": ["\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { GenreRow } from \"./GenreRow\";\n\nexport interface GenreColumns {\n    GenreId: Column<GenreRow>;\n    Name: Column<GenreRow>;\n}\n\nexport class GenreColumns extends ColumnsBase<GenreRow> {\n    static readonly columnsKey = 'MovieDB.Genre';\n    static readonly Fields = fieldsProxy<GenreColumns>();\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface GenreRow {\n    GenreId?: number;\n    Name?: string;\n}\n\nexport abstract class GenreRow {\n    static readonly idProperty = 'GenreId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'MovieDB.Genre';\n    static readonly lookupKey = 'MovieDB.Genre';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<GenreRow>('MovieDB.Genre') }\n    static async getLookupAsync() { return getLookupAsync<GenreRow>('MovieDB.Genre') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<GenreRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { GenreRow } from \"./GenreRow\";\n\nexport namespace GenreService {\n    export const baseUrl = 'MovieDB/Genre';\n\n    export declare function Create(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<GenreRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<GenreRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MovieDB/Genre/Create\",\n        Update: \"MovieDB/Genre/Update\",\n        Delete: \"MovieDB/Genre/Delete\",\n        Retrieve: \"MovieDB/Genre/Retrieve\",\n        List: \"MovieDB/Genre/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>GenreService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { MovieKind } from \"./MovieKind\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport interface MovieColumns {\n    MovieId: Column<MovieRow>;\n    Title: Column<MovieRow>;\n    Description: Column<MovieRow>;\n    Storyline: Column<MovieRow>;\n    Year: Column<MovieRow>;\n    ReleaseDate: Column<MovieRow>;\n    Runtime: Column<MovieRow>;\n    Kind: Column<MovieRow>;\n}\n\nexport class MovieColumns extends ColumnsBase<MovieRow> {\n    static readonly columnsKey = 'MovieDB.Movie';\n    static readonly Fields = fieldsProxy<MovieColumns>();\n}\n\n[MovieKind]; // referenced types", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum MovieKind {\n    Film = 1,\n    MiniSeries = 3,\n    TestSeries = 4\n}\nDecorators.registerEnumType(MovieKind, 'BinhSerene.MovieDB.MovieKind', 'MovieDB.MovieKind');", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { MovieGenresRow } from \"./MovieGenresRow\";\n\nexport interface MovieGenresColumns {\n    MovieGenreId: Column<MovieGenresRow>;\n    MovieTitle: Column<MovieGenresRow>;\n    GenreName: Column<MovieGenresRow>;\n}\n\nexport class MovieGenresColumns extends ColumnsBase<MovieGenresRow> {\n    static readonly columnsKey = 'MovieDB.MovieGenres';\n    static readonly Fields = fieldsProxy<MovieGenresColumns>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface MovieGenresRow {\n    MovieGenreId?: number;\n    MovieId?: number;\n    GenreId?: number;\n    MovieTitle?: string;\n    GenreName?: string;\n}\n\nexport abstract class MovieGenresRow {\n    static readonly idProperty = 'MovieGenreId';\n    static readonly localTextPrefix = 'MovieDB.MovieGenres';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieGenresRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieGenresRow } from \"./MovieGenresRow\";\n\nexport namespace MovieGenresService {\n    export const baseUrl = 'MovieDB/MovieGenres';\n\n    export declare function Create(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MovieDB/MovieGenres/Create\",\n        Update: \"MovieDB/MovieGenres/Update\",\n        Delete: \"MovieDB/MovieGenres/Delete\",\n        Retrieve: \"MovieDB/MovieGenres/Retrieve\",\n        List: \"MovieDB/MovieGenres/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieGenresService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"./MovieKind\";\n\nexport interface MovieRow {\n    MovieId?: number;\n    Title?: string;\n    Description?: string;\n    Storyline?: string;\n    Year?: number;\n    ReleaseDate?: string;\n    Runtime?: number;\n    Kind?: MovieKind;\n    GenreList?: number[];\n}\n\nexport abstract class MovieRow {\n    static readonly idProperty = 'MovieId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'MovieDB.Movie';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport namespace MovieService {\n    export const baseUrl = 'MovieDB/Movie';\n\n    export declare function Create(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MovieDB/Movie/Create\",\n        Update: \"MovieDB/Movie/Update\",\n        Delete: \"MovieDB/Movie/Delete\",\n        Retrieve: \"MovieDB/Movie/Retrieve\",\n        List: \"MovieDB/Movie/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface GenreForm {\n    Name: StringEditor;\n}\n\nexport class GenreForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Genre';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!GenreForm.init)  {\n            GenreForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(GenreForm, [\n                'Name', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { StringEditor, IntegerEditor, DateEditor, EnumEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"./MovieKind\";\n\nexport interface MovieForm {\n    Title: StringEditor;\n    Description: StringEditor;\n    Storyline: StringEditor;\n    Year: IntegerEditor;\n    ReleaseDate: DateEditor;\n    Runtime: IntegerEditor;\n    Kind: EnumEditor;\n    GenreList: LookupEditor;\n}\n\nexport class MovieForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Movie';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieForm.init)  {\n            MovieForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = DateEditor;\n            var w3 = EnumEditor;\n            var w4 = LookupEditor;\n\n            initFormType(MovieForm, [\n                'Title', w0,\n                'Description', w0,\n                'Storyline', w0,\n                'Year', w1,\n                'ReleaseDate', w2,\n                'Runtime', w1,\n                'Kind', w3,\n                'GenreList', w4\n            ]);\n        }\n    }\n}\n\n[MovieKind]; // referenced types", "\uFEFFimport { ServiceLookupEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface MovieGenresForm {\n    MovieId: ServiceLookupEditor;\n    GenreId: LookupEditor;\n}\n\nexport class MovieGenresForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.MovieGenres';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieGenresForm.init)  {\n            MovieGenresForm.init = true;\n\n            var w0 = ServiceLookupEditor;\n            var w1 = LookupEditor;\n\n            initFormType(MovieGenresForm, [\n                'MovieId', w0,\n                'GenreId', w1\n            ]);\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "_GenreColumns", "__name", "GenreColumns", "import_corelib", "_GenreRow", "__async", "__name", "GenreRow", "import_corelib", "GenreService", "x", "r", "s", "o", "import_corelib", "import_corelib", "MovieKind", "_MovieColumns", "__name", "MovieColumns", "import_corelib", "_MovieGenresColumns", "__name", "MovieGenresColumns", "import_corelib", "_MovieGenresRow", "__name", "MovieGenresRow", "import_corelib", "MovieGenresService", "x", "r", "s", "o", "import_corelib", "_MovieRow", "__name", "MovieRow", "import_corelib", "MovieService", "x", "r", "s", "o", "import_corelib", "_GenreForm", "prefix", "w0", "__name", "GenreForm", "import_corelib", "_MovieForm", "prefix", "w0", "w1", "w2", "w3", "w4", "__name", "MovieForm", "import_corelib", "_MovieGenresForm", "prefix", "w0", "w1", "__name", "MovieGenresForm"]
}
